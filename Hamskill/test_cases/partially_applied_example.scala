/** Autogenerated Scala Code by ANTLR v4 parser.
  * Originally Developed by: Zayd Hammoudeh (zayd.hammoudeh@sjsu.edu)
  * 
  * Course: CS252 (Spring 2016)
  * Special Thanks to Dr. Thomas Austin (thomas.austin@sjsu.edu)
  */

object partially_applied_example {

  private def zayd_foldr (___0___ : Int =>  Int =>  Int) (___1___ : Int) (___2___ : List[Int]) :  Int = (___0______1______2___) match {
      case (_, acc, Nil) =>  acc
      case (f, acc, ((x)::(xs))) =>  f(x)(foldr(f)(acc)(xs))
  } // End of function

  private def add3 (___0___ : Int) (___1___ : Int) (___2___ : Int) :  Int = (___0______1______2___) match {
      case (x, y, z) =>  x+y+z
  } // End of function

  def addTwoPlusOne = add3(1)_  } // End of function

  def main(args : Array[String]){
     println((zayd_foldr(addTwoPlusOne)(0)(List(1, 2, 3))).toString())
  } // End of function

}
