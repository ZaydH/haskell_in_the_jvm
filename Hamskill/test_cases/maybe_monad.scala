/** Autogenerated Scala Code by ANTLR v4 parser.
  * Originally Developed by: Zayd Hammoudeh (zayd.hammoudeh@sjsu.edu)
  * 
  * Course: CS252 (Spring 2016)
  * Special Thanks to Dr. Thomas Austin (thomas.austin@sjsu.edu)
  */

object maybe_monad {

  private def maybeAddOne (___0___ : Int) : Option[ Int] = (___0___) match {
      case (x) =>  if(x < 0)
        {
           None
        }
        else{
           Some((x + 1))
        }
  } // End of function

  private def doubleIncrementMonad (___0___ : Int) : Option[ Int] = (___0___) match {
      case (x) =>  (for {
          y <- (maybeAddOne (x))
          z <- (maybeAddOne (y))
        }
        yield(z))
  } // End of function

  def main(args : Array[String]){
     println ((doubleIncrementMonad (3)).toString())
     println ((doubleIncrementMonad (-1)).toString())
  } // End of function

}
